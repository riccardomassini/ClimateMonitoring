l'architettura software del progetto, sia lato client che lato server, è di tipo multilayer, precisamente MVC(Model-View-Controller).

Un architettura che segue il paradigma MVC è composta da 3 layer principali (dal più alto al più basso):
    View --> gestisce la presentazione dei dati/elaborazioni e gli input dell'utente, questi ultimi vengono inviati ai rispettivi controller;
    Controller --> esegue determinate azioni in base all'input ricevuto, che possono comportare l'interazione coi dati sottostanti o l'aggiornamento della vista;    
    Model --> rappresenta la gestione dei dati e la logica applicativa
    
Il Server, essendo integrato con Java RMI, espone i suoi servizi attraverso gli oggetti remoti, all'interno di un sotto-layer alll'interno della parte "Model";
Ai piani più bassi del "Model" troviamo invece il DB (e classi annesse per la sua gestione), oltre che alle classi che implementano (o sono di ausilio) la logica applicativa per i servizi;
Il thread "Main", rappresentato dalla classe che gestisce la GUI, si occupa di instanziare un thread separato che rappresenta il server RMI;
Il server RMI si occupa quindi di inizializzare il registro RMI e fare il binding degli oggetti remoti;

Il client presenta una struttura molto simile a quella del server, ma abbiamo solo un thread principale (Main) per gestire la GUi,
e il layer del "Model" si occupa sostanzialmente di elaborare i dati ricevuti dal server e di spedirli al primo layer per la presentazione;
Come sotto-layer più in alto per il "Model" sono presenti una serie di classi che implementano la logica applicativa per gestire le singole funzionalità principali del client;
Queste classi si occuperanno quindi di fare il lookup al registro RMI e di richiedere i rispettivi servizi in base a quello che serve;

